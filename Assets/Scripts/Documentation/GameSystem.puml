@startuml GameSystem
allow_mixing
skinparam ComponentBackgroundColor LightSkyBlue
title Hi√©rarchie des scripts et GameObjects

!include toImport.puml

class GameManager{
    - PlayerType playerType
    - GameState gameState
    GameObject cardPrefab
    - HumanPlayer humanPlayerPrefab
    - AIPlayer aiPlayerPrefab
    - GameObject deckPrefab
    - GameObject discardPrefab
    - GameObject handPrefab
    - HumanPlayer humanPlayerInstance
    - AIPlayer aiPlayerInstance
    + Board board
    - GameObject cloudSpawnerPrefab
    - InGameMenu inGameMenu
    - bool isAiTurn
    - bool isMenuOpen
    - List<PlayerInputNotifier> playerInputNotifiers
    - bool gameStarted
    - System.Type[] worldCardTypes
    - System.Type[] civilisationCardTypes
    - System.Type[] availableCardTypes

    - void Start()
    - void Update()
    - IEnumerator AITurn()
    - void HandleEscapePress()
    + void StartGame()
    - void HandlePlayerInput(GameObject clickedObject)
    - void PopulateDeck(GameObject deck, Player player)
    - void AddPersistentCardToHand(Player player)
    - void InitializePlayerStartingResources(Player player, List<Tile> tiles)
    - void AssignStartingTiles(Player player, List<Tile> tiles, int count)
    void RegisterObserversToPlayer(Player player)
    - void DeselectCurrentTile()
}
note right of GameManager::Update()
Trigger AI move when 
it's the AI's turn.

OnPlayerInput?.Invoke(move);
end note

class GameState {
    - const int WINNING_POINTS_AMOUNT
    - Player playerCivilisation
    - Player playerWorld
    + Player PlayerCivilisation { set }
    + Player PlayerWorld { set }
    + Player currentInstancePlayer
    - PlayerType currentPlayerTurn
    + int turnCount
    - Board currentBoard
    + Card lastPlayedCard

    + Board GetCurrentBoard()
    + void SetFirstPlayer(PlayerType playerType)
    + bool HasPlayerWon(Player player)
    + List<Card> GetPlayableCards(Player player)
    + GameState PlayCard(Card card, Player player)
    + void SetCurrentPlayerTurnToNextPlayer()
    + Player GetCurrentPlayingPlayer()
    + void SetBoard(Board board)
    + void DrawCardToHand(Player player)
    + IEnumerator DrawCardToHandAfterDelay(float delay)
    + Card CreateCardGameObject(CardData cardData, GameObject deck, GameObject cardPrefab)
}

abstract class Player {
    - int points
    + int Points { get ; set }
    - PlayerType playerType
    + PlayerType PlayerType { get ; set }
    + List<Observer> observers
    + Dictionary<RessourceTypes, int> currentRessources
    + List<Tile> ownedTiles
    + List<Card> deck
    + List<Card> hand
    + List<Card> discardPile
    + Tile selectedTile
    + const int MaxHandSize

    + {abstract} Card GetBestPlayableCard();
    + void AddCardInDeck(Card card)
    + void GiveCard(Card card)
    + void MoveCardFromDeckToHand(Card card)
    + void MoveCardFromHandToDiscardPile(Card card)
    + void AddOwnedTile(Tile tile)
    + void RemoveOwnedTile(Tile tile)
    + void ChangeSelectedTile(Tile tile)
    + void ComputeRessources(GameState gameState)
    + void RegisterObserver(Observer observer)
    + void NotifyObservers()
    + bool TrySpendResources(Dictionary<RessourceTypes, int> cost)
    + void DeselectTile()
    + void ShuffleDiscardIntoDeck()
    + void DrawCard(GameState gameState)
}

class HumanPlayer {
    + GetBestPlayableCard() : Card
}

class AIPlayer {
    + GetBestPlayableCard() : Card
    - MiniMax() : int
}
note left of AIPlayer::GetBestPlayableCard
AI behavior logic
end note

class Card {
    + cost : Dictionary<RessourceTypes, int>
    + effectList : List<ICardEffect>
    - List<ICardCondition> conditions
    - TextMeshProUGUI titleText
    - TextMeshProUGUI ressourceText
    - bool addOwnedTile
    - bool isPersistent
    + Start()
    + AddEffect(ICardEffect effect)
    + AddCost(RessourceTypes ressource, int quantity)
    + ApplyEffects(gameState : GameState)
    + Dictionary<RessourceTypes, int> GetCost()
    + bool CanBePlayed(Dictionary<RessourceTypes, int> playerResources)
    + void OnClick(GameState gameState)
    + void SelectedVisual()
    + void NormalVisual()
    + void AddCondition(ICardCondition condition)
    + bool GetAddOwnedTile()
    + bool GetIsPersistent()
    + bool TryPlay(GameState gameState, Player player)
}

class Board {
    + GameObject forestPrefab
    + GameObject mountainPrefab
    + GameObject lakePrefab
    + GameObject plainPrefab
    + GameObject desertPrefab
    + GameObject[] animalPrefabs
    + event Action OnBoardGenerated
    - TileType[] grid
    + int radius
    - GenerationConfig config
    Dictionary<TileType, float> probabilities

    + Awake()
    - void PlaceAnimals()
    + CreateBoard() : void
    - bool IsTileGenerated(int q, int r)
    - void FixLonelyLakes()
    - int CountNeighbors(int q, int r)
    - bool IsInsideMap(int q, int r)
    - GameObject GetTilePrefab(TileType type)
    - Vector3 AxialToIsometric(int q, int r)
    - GetRandomTileType(Dictionary<TileType, float> probabilities) : TileType
    + void LogAllTiles()
    + List<Tile> GetAllTiles()
    + void InitializePlayerResources(Player player)
}

note left of Board::CreateBoard
  Responsible for
  procedural creation
end note

class Tile {
    + Dictionary<RessourceTypes, int> producedRessources
    + TileType tileType
    + Player owner
    - GameObject borderRedPrefab
    - GameObject borderBluePrefab
    - GameObject ParticlePrefab
    - GameObject housePrefab
    - GameObject currentStructure
    - GameObject currentBorder

    + void Initialize(TileType type, bool _debug = false)
    + void UpdateBorder()
    - void AssignResources()
    + void OnClick(GameState gameState)
    + bool TryGetProducedAmount(RessourceTypes type, out int amount)
    + List<RessourceTypes> GetProducedRessourceTypes()
    + void ElevateTile()
    + void ResetElevation()
    + void SpawnParticle()
    + void SetStructure(GameObject structure)
    + GameObject GetStructureOnTile()
    + bool HasStructure()
}

class PlayerInputDetection {
    + {static} PlayerInputDetection Instance
    - InputAction mouseClick
    - LayerMask raycastLayerMask
    - GameState gameState
    + GameState GameState { set }
    - Camera mainCamera
    - GraphicRaycaster[] raycasters
    - EventSystem eventSystem

    - void Awake()
    - void OnEnable()
    - void OnDisable()
    - void MousePressed(InputAction.CallbackContext context)
    - void DeselectCurrentTile()
}
note left of PlayerInputDetection
  detect a left click
  and select any tile 
  clicked and deselect the 
  previously selected one
end note

class PlayerInputNotifier {
    + OnGameObjectClicked : event Action<GameObject>
    + OnMouseDown()
}
note right of PlayerInputNotifier::Update()
// Notify all observers that 
// a move has been made.
OnPlayerInput?.Invoke(move);
end note

interface IClickable {
    OnClick()
}

class GenerationConfig {
    + float forestProbability
    + float mountainProbability
    + float lakeProbability
    + float plainProbability
    + float desertProbability
    + bool preventLargeDeserts
    + float maxDesertClusterRatio
    + bool forceLakeNearMountains
    + bool forceForestNearLakes

    + static GenerationConfig LoadFromJson()
}

class CameraController {
    - Camera cam
    + float moveSpeed
    + float panSpeed
    + float zoomSpeed
    + float minZoom 
    + float maxZoom
    - Vector3 dragOrigin
    - void Start()
    - void Update()
    - void HandlePan()
    - void HandleZoom()
}

class SceneChanger {
    + {static} SceneChanger Instance
    - {static} string currentScene
    - {static} PlayerType PlayerType 
    + {static} PlayerType PlayerType { get }
    - string gameScene
    - string homeScene
    - GameObject gameManagerPrefab
    - void Awake()
    - void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    - void OnEnable()
    - void OnDisable()
    - {static} void SceneChange(string scene)
    + void GameStartCivilisation()
    + void GameStartWorld()
    + void GameStart()
    + void Home()
    + void QuitApp()
}

class MonoBehavior #LightGreen

component SceneManagerPrefab
component GameManagerPrefab
component humanPlayerPrefab
component aiPlayerPrefab
component TilePrefabs
component AnimalPrefab
component CardPrefab

GameState --o PlayerType
GameState --o Card

GameManager --o PlayerType
GameManager --o InGameMenu

Player --o PlayerType
Player --o RessourceTypes

Tile --o TileType
Tile --o RessourceTypes

GameManagerPrefab -d-o "1..1" GameManager : "Has"
GameManager -l-o humanPlayerPrefab : "Has"
GameManager -l-o aiPlayerPrefab : "Has"

HumanPlayer -l--o GameManager : "Has"
AIPlayer -l--o GameManager : "Has"
PlayerInputNotifier --u---o "1" GameManager : "Subscribes to each notifier\not all Tile and Card"

GameManager -d-|> MonoBehavior
GameState -l-o "1..1 " GameManager : " Has"
Board -r-o "  1  " GameManager : " Has"

GameState -d-|> MonoBehavior
Board -r-o "  1  " GameState : " Has"
Player --u---o "2" GameState : "Has"

Player -d-|> MonoBehavior
Player --o Observer : "Has"
Player --o Card : "Has"
Player -l--o Tile : "Has"

HumanPlayer --l--|> Player
AIPlayer -l-|> Player

AnimationController -d-|> MonoBehavior

Card ---r---|> AnimationController
Card <.d. "\t1" IClickable : " Implements"
Card -u-o "0..*" Player : "\t\t\t\nHas"
Card o-d- "1..*" ICardEffect : " Has"
Card o-d- "1..*" ICardCondition : " Has"

Board -d-|> MonoBehavior
Board --o AnimalPrefab : "Has"
Board --o TilePrefabs : "Has"
Board --o GenerationConfig : "Has"

Tile -u-|> MonoBehavior
Tile <.d. "\t1" IClickable : " Implements"
Tile --o Player : "Has"

CameraController -u-|> MonoBehavior

humanPlayerPrefab o- "\t1" HumanPlayer : " Has"
aiPlayerPrefab o- "\t1" AIPlayer : " Has"

TilePrefab -l--o "\t1" Tile : "Has"

CardPrefab o- "\t1" PlayerInputNotifier : "Has"
CardPrefab -r--o "\t1" Card : "Has"

SceneManagerPrefab --o SceneChanger : "Has"
SceneManagerPrefab -l--o GameManagerPrefab : "Has"

legend
    GameManager is the entry point of the game logic.
    Player and Card classes group implements the strategy pattern.
end legend

@enduml
