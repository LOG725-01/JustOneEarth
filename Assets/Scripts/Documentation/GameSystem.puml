@startuml GameSystem
allow_mixing
skinparam ComponentBackgroundColor LightSkyBlue
title Hi√©rarchie des scripts et GameObjects

!include toImport.puml

class GameManager{
    - gameMode : GameMode
    + gameState : GameState
    - Board board
    - HumanPlayer humanPlayerPrefab
    - AIPlayer aiPlayerPrefab
    - HumanPlayer humanPlayerInstance
    - AIPlayer aiPlayerInstance
    - List<PlayerInputNotifier> playerInputNotifiers
    - bool gameStarted
    + void setGameMode(GameMode gameMode)
    + void Awake()
    + void StartGame()
    - void HandlePlayerInput(GameObject clickedObject)
    + void PlayCardFromUI(Card card)
    + Update()
    - void InitializePlayerStartingResources(Player player, List<Tile> tiles)
    - void AssignStartingTiles(Player player, List<Tile> tiles, int count)
    void RegisterObserversToPlayer(Player player)
}
note right of GameManager::Update()
Trigger AI move when 
it's the AI's turn.

OnPlayerInput?.Invoke(move);
end note

class GameState {
    + players : Lis<Player>
    + Player currentInstancePlayer
    + currentPlayerTurn : int
    + turnCount : int
    + currentBoard : Board
    + GetCurrentBoard()
    + addPlayers(player : Player)
    + HasPlayerWon(player : Player) : bool
    + GetPlayableCards(player : Player) : List<Card>
    + PlayCard(cardAction : Card) : GameState
    + SetCurrentPlayerTurnToNextPlayer()
    + GetNextPlayingPlayerIndex() : int
    + getCurrentPlayingPlayer() : Player
    + SetBoard(Board board)
}

abstract class Player{
    + points : int
    + observers : List<Observer>
    + currentRessources : Dictionary<RessourceTypeEnum, int>
    + ownedTiles : List<Tile>
    + cards : List<Card>
    + Tile selectedTile

    + {abstract} Card GetBestPlayableCard()
    + AddCardInHand(card : Card)
    + RemoveCardFromHand(card : Card)
    + AddOwnedTile(tile : Tile)
    + RemoveOwnedTile(tile : Tile)
    + ChangeSelectedTile(Tile tile)
    + ComputeRessources()
    + RegisterObserver(Observer observer)
    + NotifyObservers()
}

class HumanPlayer{
    + GetBestPlayableCard() : Card
}

class AIPlayer{
    + GetBestPlayableCard() : Card
    - MiniMax() : int
}
note left of AIPlayer::GetBestPlayableCard
AI behavior logic
end note

class Card {
    + cost : Dictionary<RessourceTypes, int>
    + effectList : List<ICardEffect>
    - TextMeshProUGUI titleText
    - TextMeshProUGUI ressourceText
    + Start()
    + AddEffect(ICardEffect effect)
    + AddCost(RessourceTypes ressource, int quantity)
    + ApplyEffects(gameState : GameState)
    + Dictionary<RessourceTypes, int> GetCost()
    + bool CanBePlayed(Dictionary<RessourceTypes, int> playerResources)
    + OnClick(GameState gameState)
    + void SelectedVisual()
    + void NormalVisual()
}

interface ICardEffect{
    +void ApplyEffect()
}

class GainPointEffect{
    + void ApplyEffect()
}

class Board {
    + GameObject forestPrefab
    + GameObject mountainPrefab
    + GameObject lakePrefab
    + GameObject plainPrefab
    + GameObject desertPrefab
    + GameObject[] animalPrefabs
    + event Action OnBoardGenerated
    - TileType[] grid
    + int radius
    - GenerationConfig config
    Dictionary<TileType, float> probabilities

    + Start()
    - void PlaceAnimals()
    + CreateBoard() : void
    - bool IsTileGenerated(int q, int r)
    - void FixLonelyLakes()
    - int CountNeighbors(int q, int r)
    - bool IsInsideMap(int q, int r)
    - GameObject GetTilePrefab(TileType type)
    - Vector3 AxialToIsometric(int q, int r)
    - GetRandomTileType(Dictionary<TileType, float> probabilities) : TileType
    + void LogAllTiles()
    + List<Tile> GetAllTiles()
    + void InitializePlayerResources(Player player)
}

note left of Board::CreateBoard
  Responsible for
  procedural creation
end note

class Tile {
    + producedRessources : Dictionary<RessourceTypeEnum, int>
    + tileType : TileTypeEnum
    + Player owner

    - AssignResources()
    + OnClick()
    + Initialize(TileType type)
}

class PlayerInputNotifier {
    + OnGameObjectClicked : event Action<GameObject>
    + OnMouseDown()
}
note right of PlayerInputNotifier::Update()
// Notify all observers that 
// a move has been made.
OnPlayerInput?.Invoke(move);    
end note

interface IClickable {
    OnClick()
}

class GenerationConfig {
    + float forestProbability
    + float mountainProbability
    + float lakeProbability
    + float plainProbability
    + float desertProbability
    + bool preventLargeDeserts
    + float maxDesertClusterRatio
    + bool forceLakeNearMountains
    + bool forceForestNearLakes

    + static GenerationConfig LoadFromJson()
}

class CameraController {
    - Camera cam;
    + float moveSpeed
    + float panSpeed
    + float zoomSpeed
    + float minZoom 
    + float maxZoom
    - Vector3 dragOrigin
    - void Start()
    - void Update()
    - void HandlePan()
    - void HandleZoom()
}

class SceneChanger {
    + {static} SceneChanger Instance;
    - string gameScene
    - string homeScene
    - GameObject gameManagerPrefab
    - GameMode gameMode
    - void Start()
    - {static} void SceneChange(string scene)
    + void GameStart()
    + void Home()
    + void QuitApp()
}

class MonoBehavior #LightGreen

component SceneManagerPrefab
component GameManagerPrefab
component humanPlayerPrefab
component aiPlayerPrefab
component TilePrefabs
component AnimalPrefab
component CardPrefab

GameManagerPrefab -d-o "1..1" GameManager : "Has"
GameManager -l-o humanPlayerPrefab : "Has"
GameManager -l-o aiPlayerPrefab : "Has"

HumanPlayer -l--o GameManager : "Has"
AIPlayer -l--o GameManager : "Has"
PlayerInputNotifier --u---o "1" GameManager : "Subscribes to each notifier\not all Tile and Card"

GameManager -d-|> MonoBehavior
GameState -l-o "1..1 " GameManager : " Has"
Board -r-o "  1  " GameManager : " Has"

GameState -d-|> MonoBehavior
Board -r-o "  1  " GameState : " Has"
Player --u---o "2" GameState : "Has"

Player -d-|> MonoBehavior
Observer --o Player : "Has"
Card --o Player : "Has"
Tile -l--o Player : "Has"

HumanPlayer --l--|> Player
AIPlayer -l-|> Player

AnimationController -d-|> MonoBehavior

GainPointEffect .r.> ICardEffect

Card ---r---|> AnimationController
Card <.d. "\t1" IClickable : " Implements"
Card -u-o "0..*" Player : "\t\t\t\nHas"
Card o-d- "1..*" ICardEffect : " Has"

Board -d-|> MonoBehavior
Board --o AnimalPrefab : "Has"
Board --o TilePrefabs : "Has"
Board --o GenerationConfig : "Has"

Tile -u-|> MonoBehavior
Tile <.d. "\t1" IClickable : " Implements"
Tile --o Player : "Has"

CameraController -u-|> MonoBehavior

humanPlayerPrefab o- "\t1" HumanPlayer : " Has"
aiPlayerPrefab o- "\t1" AIPlayer : " Has"

TilePrefab o- "\t1" PlayerInputNotifier : "Has"
TilePrefab -l--o "\t1" Tile : "Has"

CardPrefab o- "\t1" PlayerInputNotifier : "Has"
CardPrefab -r--o "\t1" Card : "Has"

SceneManagerPrefab --o SceneChanger : "Has"
SceneManagerPrefab -l--o GameManagerPrefab : "Has"

legend
    GameManager is the entry point of the game logic.
    Player and Card classes group implements the strategy pattern.
end legend

@enduml
